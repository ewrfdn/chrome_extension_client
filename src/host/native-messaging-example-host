

from ast import Not
from email import message
import sys
import signal
import socket
import struct
import urllib
import time
import multiprocessing 
import threading
import os
import base64


def send_message(message):
  b64 = base64.b64encode( message.encode('utf-8'))
  text=str(b64,encoding='utf-8')
  message = f'"{text}"'
  sys.stdout.buffer.write(struct.pack('=I', len(message.encode("utf-8"))))
  # Write the message itself.
  sys.stdout.buffer.write(struct.pack(str(len(message.encode("utf-8")))+"s", message.encode("utf-8")))
  sys.stdout.buffer.flush()


class SocketServe:
      local_ip = '0.0.0.0'
      port = 3059
      def __init__(self,port=3059):
        if port is not None:
          self.port = port
        self.connections = []
        self.socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.socket.bind((self.local_ip,self.port))
        self.socket.listen(1)
      def connect(self):
          while True:
            conn, addr = self.socket.accept()
            sock_name = conn.getsockname()
            self.connections=[conn]
      def send(self,msg):
          for conn in self.connections:
            conn.sendall(msg.encode('utf-8'))
      def receive(self,queue):
            while True:
                for conn in self.connections:
                    msg = urllib.parse.unquote(conn.recv(8192).decode('utf-8'))
                    if msg:
                        queue.put(msg)
                    time.sleep(0.1)



def consumer(q):
    while True:
        res=q.get()
        send_message(res)
        time.sleep(0.1)


def read_thread_func(serve):
  while True:
    try:
      # Read the message length (first 4 bytes).
        text_length_bytes = sys.stdin.buffer.read(4)
        
        if not text_length_bytes:
          sys.exit(0)
        
        # Unpack message length as 4 byte integer.
        if (sys.byteorder == 'big'):
          text_length = int.from_bytes(text_length_bytes, byteorder='big')
        else:
          text_length = int.from_bytes(text_length_bytes, byteorder='little')
        
        text = sys.stdin.read(text_length)
        text = str(base64.b64decode(text),encoding="utf-8") 
        serve.send(text)
    except Exception as e:
        if (os.path.exists('./data')):
            with open('./data', 'w') as f:
              f.write(str(e))
              f.close()
        else:
            with open('./data', 'x') as f:
              f.write(str(e))
              f.close()
def main():
      server =  SocketServe()
      action_queue = multiprocessing.Queue()
      server_thread = threading.Thread(target=server.connect,args=())
      recv_thread = threading.Thread(target=server.receive,args=(action_queue,))
      consumer_thread = threading.Thread(target=consumer,args=(action_queue,))
      recv_thread.daemon = True
      server_thread.daemon = True
      consumer_thread.daemon = True
      server_thread.start()
      recv_thread.start()
      consumer_thread.start()
      read_thread_func(server)
      sys.exit(0)
   
    
if __name__ == '__main__':
  main()
